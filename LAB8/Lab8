{"cells":[{"cell_type":"markdown","source":["BT TREN LOP"],"metadata":{"id":"UEIrs30Mg2-n"}},{"cell_type":"code","source":["import numpy as np\n","u = np.array([2,-1,5,0])\n","v = np.array([4,3,1,-1])\n","w = np.array([-6,2,0,3])\n","x = 2*u-(v+3*w)\n","print (x)\n","x = 0.5*(2*u-v-3*w)\n","print (x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iaz4WNf9g54v","executionInfo":{"status":"ok","timestamp":1752138375898,"user_tz":-420,"elapsed":14,"user":{"displayName":"","userId":""}},"outputId":"f74a0056-e662-4e62-d8ce-4251f5ccbe5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 18 -11   9  -8]\n","[ 9.  -5.5  4.5 -4. ]\n"]}]},{"cell_type":"code","source":["from numpy import linalg\n","A = np.matrix([[0, -1, 3],[1, 1, 1],[4, 2, 2]])\n","B = np.array([-1, -2, -2])\n","X = np.linalg.solve(A, B)\n","print (X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QwRBJSQPkmKy","executionInfo":{"status":"ok","timestamp":1752138401037,"user_tz":-420,"elapsed":13,"user":{"displayName":"","userId":""}},"outputId":"e804eea0-a009-4c55-baa5-c9a9a2710ecb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1. -2. -1.]\n"]}]},{"cell_type":"code","source":["A = np.matrix([[1,0],[0,0]])\n","B = np.matrix([[0,0],[0,1]])\n","from numpy import linalg as LA\n","LA.inv(A)\n","LA.inv(B)"],"metadata":{"id":"sYq8o7NVg6Nn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["A = np.matrix([[1,0],[0,0]])\n","B = np.matrix([[0,0],[0,1]])\n","from numpy import linalg as LA\n","LA.inv(A+B)\n","print(LA.inv(A+B))\n","LA.det(A)\n","print(LA.det(A))\n","LA.det(B)\n","print(LA.det(B))\n","LA.det(A+B)\n","print(LA.det(A+B))"],"metadata":{"id":"eZc_jCUBm4cw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import sympy as sp\n","\n","x, y = sp.symbols('x y')\n","A = sp.Matrix([[x, y],[y, x]])\n","\n","x1, y1 = sp.symbols('x1 y1')\n","A1 = sp.Matrix([[x1, y1],[y1, x1]])\n","\n","x2, y2 = sp.symbols('x2 y2')\n","A2 = sp.Matrix([[x2, y2],[y2, x2]])\n","\n","print(A1.T)\n","print(A2.T)\n","print((A1 + A2).T)\n","print(((A1 + A2).T).equals(A1 + A2))\n","c = sp.symbols('c')\n","print(c * A)\n","print(((c * A).T).equals(c * A))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e6bavYY1m4m_","executionInfo":{"status":"ok","timestamp":1752139238141,"user_tz":-420,"elapsed":19,"user":{"displayName":"","userId":""}},"outputId":"557b8124-0650-4b73-e78c-a750ef56dad0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Matrix([[x1, y1], [y1, x1]])\n","Matrix([[x2, y2], [y2, x2]])\n","Matrix([[x1 + x2, y1 + y2], [y1 + y2, x1 + x2]])\n","True\n","Matrix([[c*x, c*y], [c*y, c*x]])\n","True\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","v1 = np.array([1, 2, 3])\n","v2 = np.array([0, 1, 2])\n","v3 = np.array([-1, 0, 1])\n","v = np.array([1, 1, 1])\n","\n","A = np.column_stack((v1, v2, v3))\n","\n","try:\n","    coeffs = np.linalg.solve(A, v)\n","    print(coeffs)\n","    check_v = coeffs[0] * v1 + coeffs[1] * v2 + coeffs[2] * v3\n","    print(check_v)\n","    if np.allclose(check_v, v):\n","        print(\"Vector v=(1,1,1) là tổ hợp tuyến tính của v1, v2, v3.\")\n","    else:\n","        print(\"Có lỗi trong quá trình tính toán hoặc v không phải tổ hợp tuyến tính.\")\n","except np.linalg.LinAlgError:\n","    print(\"Hệ phương trình không có nghiệm duy nhất (có thể vô nghiệm hoặc có vô số nghiệm).\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7R-LQ0YWg6Xv","executionInfo":{"status":"ok","timestamp":1752138195783,"user_tz":-420,"elapsed":32,"user":{"displayName":"","userId":""}},"outputId":"434aabca-7044-4d73-f70f-ab1d2feaeace"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 5.00000000e-01 -1.66533454e-16 -5.00000000e-01]\n","[1. 1. 1.]\n","Vector v=(1,1,1) là tổ hợp tuyến tính của v1, v2, v3.\n"]}]},{"cell_type":"code","source":["import sympy as sp\n","c1, c2, c3 = sp.symbols('c1 c2 c3')\n","sp.solve([c1-2*c3, 2*c1+c2, 3*c1+2*c2+c3], [c1, c2, c3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_zHWjCHo13F","executionInfo":{"status":"ok","timestamp":1752139273103,"user_tz":-420,"elapsed":17,"user":{"displayName":"","userId":""}},"outputId":"09006ae0-13a6-436c-c5be-75a066fc8620"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{c1: 0, c2: 0, c3: 0}"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["import sympy as sp\n","c1, c2 = sp.symbols('c1 c2')\n","u1, u2 = sp.symbols('u1 u2')\n","sp.solve([c1+c2-u1,c1-c2-u2])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mjtqx4gbo52z","executionInfo":{"status":"ok","timestamp":1752139374840,"user_tz":-420,"elapsed":33,"user":{"displayName":"","userId":""}},"outputId":"ba831793-d933-4350-930f-407b43eda419"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{c1: u1/2 + u2/2, c2: u1/2 - u2/2}"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["import sympy as sp\n","c1, c2 = sp.symbols('c1 c2')\n","u1, u2 = sp.symbols('u1 u2')\n","u1 = 0\n","u2 = 0\n","sp.solve([c1+c2-u1,c1-c2-u2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7k0KLd0do5_8","executionInfo":{"status":"ok","timestamp":1752139372653,"user_tz":-420,"elapsed":18,"user":{"displayName":"","userId":""}},"outputId":"d8fc24e7-bf4f-4fb4-802f-0312d74955be"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{c1: 0, c2: 0}"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["import numpy as np\n","P = np.array([[0,0,3,3,1,1,2,2,1,1],[0,5,5,4,4,3,3,2,2,0]])\n","vecdelta = np.array([4,2])\n","P_caua = (P.T + vecdelta).T\n","print (P_caua)"],"metadata":{"id":"0BI1a3Geo6IF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","P = np.array([[0,0,3,3,1,1,2,2,1,1],[0,5,5,4,4,3,3,2,2,0]])\n","vecdelta = np.array([4,-2])\n","matran_biendoi = np.array([[1.0, 0.0],\n"," [0.0, 2.0]])\n","P_caub = (P.T @ matran_biendoi + vecdelta).T\n","print (P_caub)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NkaqJxC3pdON","executionInfo":{"status":"ok","timestamp":1752139458834,"user_tz":-420,"elapsed":54,"user":{"displayName":"","userId":""}},"outputId":"4eb550b8-2560-41af-b128-97797f024be3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 4.  4.  7.  7.  5.  5.  6.  6.  5.  5.]\n"," [-2.  8.  8.  6.  6.  4.  4.  2.  2. -2.]]\n"]}]},{"cell_type":"code","source":["import sympy as sp\n","\n","x, y = sp.symbols('x y')\n","a, b = sp.symbols('a b')\n","\n","point_vector_2d = sp.Matrix([[x], [y]])\n","reflection_matrix_2d = sp.Matrix([[-1, 0],\n","                                   [0, 1]])\n","translation_vector = sp.Matrix([[a], [b]])\n","\n","transformed_point_method1 = reflection_matrix_2d * point_vector_2d + translation_vector\n","\n","print(\"--- Kết quả biến đổi (Phương pháp 1) ---\")\n","print(transformed_point_method1)\n","\n","point_homogeneous = sp.Matrix([[x], [y], [1]])\n","homogeneous_transform_matrix = sp.Matrix([[-1, 0, a],\n","                                           [0, 1, b],\n","                                           [0, 0, 1]])\n","transformed_point_method2 = homogeneous_transform_matrix * point_homogeneous\n","\n","print(\"\\n--- Kết quả biến đổi (Phương pháp 2) ---\")\n","print(transformed_point_method2)\n","\n","print(\"\\n--- Ví dụ với các giá trị cụ thể (x=2, y=3, a=1, b=-1) ---\")\n","x_val, y_val = 2, 3\n","a_val, b_val = 1, -1\n","\n","example_result_m1 = transformed_point_method1.subs({x: x_val, y: y_val, a: a_val, b: b_val})\n","print(example_result_m1)\n","\n","example_result_m2 = transformed_point_method2.subs({x: x_val, y: y_val, a: a_val, b: b_val})\n","print(example_result_m2)"],"metadata":{"id":"gFgXYTsWp7u0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import sympy as sp\n","\n","x, y = sp.symbols('x y')\n","p, q = sp.symbols('p q')\n","a, b = sp.symbols('a b')\n","\n","point_vector_2d = sp.Matrix([[x], [y]])\n","shearing_matrix = sp.Matrix([[1, p],\n","                              [q, 1]])\n","translation_vector = sp.Matrix([[a], [b]])\n","\n","transformed_point_method1 = shearing_matrix * point_vector_2d + translation_vector\n","\n","print(\"--- Kết quả biến đổi (P' = S * P + T) ---\")\n","print(point_vector_2d)\n","print(\"\\n\", shearing_matrix)\n","print(\"\\n\", translation_vector)\n","print(\"\\n\", transformed_point_method1)\n","\n","\n","point_homogeneous = sp.Matrix([[x], [y], [1]])\n","homogeneous_transform_matrix = sp.Matrix([[1, p, a],\n","                                           [q, 1, b],\n","                                           [0, 0, 1]])\n","transformed_point_method2 = homogeneous_transform_matrix * point_homogeneous\n","\n","print(\"\\n--- Kết quả biến đổi (Ma trận biến đổi thuần nhất * P_homo) ---\")\n","print(point_homogeneous)\n","print(\"\\n\", homogeneous_transform_matrix)\n","print(\"\\n\", transformed_point_method2)\n","\n","\n","print(\"\\n--- Ví dụ với các giá trị cụ thể ---\")\n","\n","x_val, y_val = 1, 2\n","p_val, q_val = 0.5, 0\n","a_val, b_val = 3, 4\n","\n","example_result_q0_m1 = transformed_point_method1.subs({x: x_val, y: y_val, p: p_val, q: q_val, a: a_val, b: b_val})\n","print(\"\\n--- Trường hợp 1: Shearing theo trục X (q = 0) ---\")\n","print(example_result_q0_m1)\n","\n","x_val, y_val = 1, 2\n","p_val, q_val = 0, 0.5\n","a_val, b_val = 3, 4\n","\n","example_result_p0_m1 = transformed_point_method1.subs({x: x_val, y: y_val, p: p_val, q: q_val, a: a_val, b: b_val})\n","print(\"\\n--- Trường hợp 2: Shearing theo trục Y (p = 0) ---\")\n","print(example_result_p0_m1)"],"metadata":{"id":"eTkmc5kBp-Wt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import sympy as sp\n","from sympy import lambdify\n","x1, x2, x3 = sp.symbols('x1 x2 x3')\n","bieuthuc1 = x1 - x2 + x3\n","f1 = lambdify([x1, x2, x3], bieuthuc1, 'numpy')\n","a, b, c = sp.symbols('a b c')\n","d, e, f = sp.symbols('d e f')\n","f1(a, b, c)\n","print(f1(a, b, c))\n","f1(d, e, f)\n","print(f1(d, e, f))\n","f1(a+d, b+e, c+f)\n","print(f1(a+d, b+e, c+f))\n","f1(a,b,c) + f1(d,e,f) == f1(a+d, b+e, c+f)\n","print(f1(a,b,c) + f1(d,e,f) == f1(a+d, b+e, c+f))\n","(f1(a,b,c) + f1(d,e,f)).equals( f1(a+d, b+e, c+f))\n","print((f1(a,b,c) + f1(d,e,f)).equals( f1(a+d, b+e, c+f)))\n","q = sp.symbols('q')\n","(q*f1(a,b,c) + f1(d,e,f)).equals(f1(q*a+d, q*b+e, q*c+f).expand())\n","print((q*f1(a,b,c) + f1(d,e,f)).equals(f1(q*a+d, q*b+e, q*c+f).expand()))\n","bieuthuc2 = 2*x2 + 3* x3\n","f2 = lambdify([x1, x2, x3], bieuthuc2, 'numpy')\n","print(f2)\n","(q*f2(a,b,c) + f2(d,e,f)).equals(f2(q*a+d, q*b+e, q*c+f).expand())\n","print(  (q*f2(a,b,c) + f2(d,e,f)).equals(f2(q*a+d, q*b+e, q*c+f).expand()))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eICoINOGp_ZT","executionInfo":{"status":"ok","timestamp":1752139974069,"user_tz":-420,"elapsed":63,"user":{"displayName":"","userId":""}},"outputId":"0fe681da-d16b-4729-ab58-bc4e4fddcb4b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a - b + c\n","d - e + f\n","a - b + c + d - e + f\n","True\n","True\n","True\n","<function _lambdifygenerated at 0x7b0168cd5ee0>\n","True\n"]}]},{"cell_type":"code","source":["import sympy as sp\n","a, b = sp.symbols('a b')\n","x, y = sp.symbols('x y')\n","sp.solve([a+3*b-x, 2*a+5*b-y],[a,b])\n","print(sp.solve([a+3*b-x, 2*a+5*b-y],[a,b]))\n","#\n","fu1 = np.array([1,1,2])\n","fu2 = np.array([4,2,1])\n","fu = a*fu1 + b*fu2\n","print (fu)\n","#\n","fu = a.subs(a, -5*x + 3*y)*fu1 + b.subs(b, 2*x - y)*fu2 # thay giá trị tìm được ở trên vào\n","print (fu)\n","#\n","x1, x2, x3 = sp.symbols('x1 x2 x3')\n","sp.solve([x1+x2-x3, 2*x1+3*x2-x3, 3*x1+5*x2-x3],[x1, x2, x3])\n","#\n","import numpy as np\n","import math\n","from scipy import linalg as LA\n","B = np.matrix([[1.0/math.sqrt(2), 1.0/math.sqrt(2)],\n"," [-1.0/math.sqrt(2),1.0/math.sqrt(2)]]) # cos(pi/4)\n","LA.orth(B)\n"],"metadata":{"id":"Bob3gXB8p_iC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import sympy as sp\n","import numpy as np\n","\n","x, y = sp.symbols('x y')\n","x_prime, y_prime = sp.symbols(\"x' y'\")\n","theta = sp.symbols('theta')\n","\n","conic_equation_original = 5*x**2 - 6*x*y + 5*y**2 + 14*sp.sqrt(2)*x - 2*sp.sqrt(2)*y + 18\n","\n","print(\"--- Original Conic Equation ---\")\n","print(conic_equation_original)\n","\n","rotation_angle = sp.pi / 4\n","\n","print(f\"\\n--- Rotation Angle (theta) ---\")\n","print(f\"Theta = {rotation_angle}\")\n","\n","cos_theta = sp.cos(rotation_angle)\n","sin_theta = sp.sin(rotation_angle)\n","\n","print(f\"cos(theta) = {cos_theta}\")\n","print(f\"sin(theta) = {sin_theta}\")\n","\n","x_sub_val = x_prime * cos_theta - y_prime * sin_theta\n","y_sub_val = x_prime * sin_theta + y_prime * cos_theta\n","\n","print(\"\\n--- Substitution expressions ---\")\n","print(f\"x = {x_sub_val}\")\n","print(f\"y = {y_sub_val}\")\n","\n","conic_equation_transformed_val = conic_equation_original.subs({x: x_sub_val, y: y_sub_val})\n","conic_equation_simplified_val = sp.expand(conic_equation_transformed_val)\n","\n","print(\"\\n--- Conic Equation after Simplification ---\")\n","print(conic_equation_simplified_val)\n","\n","\n","print(\"\\n--- Example: Point transformation using NumPy (Numerical) ---\")\n","point_old_coords = np.array([1.0, 0.0])\n","theta_np = np.pi / 4\n","\n","transform_matrix_xy_to_xpyp = np.array([[np.cos(theta_np), np.sin(theta_np)],\n","                                        [-np.sin(theta_np), np.cos(theta_np)]])\n","\n","point_new_coords = transform_matrix_xy_to_xpyp @ point_old_coords\n","\n","print(f\"Original point (x,y): {point_old_coords}\")\n","print(f\"Rotation matrix:\\n{transform_matrix_xy_to_xpyp}\")\n","print(f\"Point (x',y'): {point_new_coords}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4zLAjr2esW-Z","executionInfo":{"status":"ok","timestamp":1752140393647,"user_tz":-420,"elapsed":83,"user":{"displayName":"","userId":""}},"outputId":"029fc02e-8323-43f2-9a9f-1a5e42cbfb6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Original Conic Equation ---\n","5*x**2 - 6*x*y + 14*sqrt(2)*x + 5*y**2 - 2*sqrt(2)*y + 18\n","\n","--- Rotation Angle (theta) ---\n","Theta = pi/4\n","cos(theta) = sqrt(2)/2\n","sin(theta) = sqrt(2)/2\n","\n","--- Substitution expressions ---\n","x = sqrt(2)*x'/2 - sqrt(2)*y'/2\n","y = sqrt(2)*x'/2 + sqrt(2)*y'/2\n","\n","--- Conic Equation after Simplification ---\n","2*x'**2 + 12*x' + 8*y'**2 - 16*y' + 18\n","\n","--- Example: Point transformation using NumPy (Numerical) ---\n","Original point (x,y): [1. 0.]\n","Rotation matrix:\n","[[ 0.70710678  0.70710678]\n"," [-0.70710678  0.70710678]]\n","Point (x',y'): [ 0.70710678 -0.70710678]\n"]}]},{"cell_type":"markdown","source":["BT O NHA"],"metadata":{"id":"pmwHuvISg4dX"}},{"cell_type":"code","source":["import sympy as sp\n","\n","x1, y1, z1 = sp.symbols('x1 y1 z1')\n","x2, y2, z2 = sp.symbols('x2 y2 z2')\n","c = sp.symbols('c')\n","\n","def g(x_val, y_val, z_val):\n","    return sp.Matrix([x_val + y_val, y_val, z_val + 2, 0])\n","\n","u = sp.Matrix([x1, y1, z1])\n","v = sp.Matrix([x2, y2, z2])\n","\n","g_u_plus_v = g(u[0] + v[0], u[1] + v[1], u[2] + v[2])\n","g_u = g(u[0], u[1], u[2])\n","g_v = g(v[0], v[1], v[2])\n","g_u_plus_g_v = g_u + g_v\n","\n","are_equal_additivity = g_u_plus_v == g_u_plus_g_v\n","\n","g_c_u = g(c * u[0], c * u[1], c * u[2])\n","c_g_u = c * g_u\n","\n","are_equal_homogeneity = g_c_u == c_g_u\n","\n","print(are_equal_additivity)\n","print(are_equal_homogeneity)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jvTV3QIFtV8_","executionInfo":{"status":"ok","timestamp":1752140541562,"user_tz":-420,"elapsed":52,"user":{"displayName":"","userId":""}},"outputId":"a48ebcb6-e323-470b-e141-240f082cbaad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","False\n"]}]},{"cell_type":"code","source":["import sympy as sp\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# --- Bài toán 1: Biến đổi tịnh tiến và đối xứng theo trục y ---\n","\n","x, y = sp.symbols('x y')\n","a, b = sp.symbols('a b')\n","\n","point_original = sp.Matrix([[x], [y]])\n","reflection_matrix_y = sp.Matrix([[-1, 0],\n","                                  [0, 1]])\n","translation_vector = sp.Matrix([[a], [b]])\n","\n","transformed_point_method1 = reflection_matrix_y * point_original + translation_vector\n","\n","print(\"--- Bài toán 1: Kết quả symbolic (Phương pháp 1) ---\")\n","print(transformed_point_method1)\n","\n","point_homogeneous = sp.Matrix([[x], [y], [1]])\n","homogeneous_transform_matrix = sp.Matrix([[-1, 0, a],\n","                                           [0, 1, b],\n","                                           [0, 0, 1]])\n","transformed_point_method2 = homogeneous_transform_matrix * point_homogeneous\n","\n","print(\"\\n--- Bài toán 1: Kết quả symbolic (Phương pháp 2) ---\")\n","print(transformed_point_method2)\n","\n","x_val, y_val = 2, 3\n","a_val, b_val = 1, -1\n","\n","point_original_num = np.array([[x_val], [y_val]])\n","reflection_matrix_y_num = np.array([[-1, 0],\n","                                     [0, 1]])\n","translation_vector_num = np.array([[a_val], [b_val]])\n","transformed_point_num_m1 = reflection_matrix_y_num @ point_original_num + translation_vector_num\n","\n","print(\"\\n--- Bài toán 1: Kết quả số (Phương pháp 1) ---\")\n","print(transformed_point_num_m1)\n","\n","point_homogeneous_num = np.array([[x_val], [y_val], [1]])\n","homogeneous_transform_matrix_num = np.array([[-1, 0, a_val],\n","                                               [0, 1, b_val],\n","                                               [0, 0, 1]])\n","transformed_point_num_m2 = homogeneous_transform_matrix_num @ point_homogeneous_num\n","\n","print(\"\\n--- Bài toán 1: Kết quả số (Phương pháp 2) ---\")\n","print(transformed_point_num_m2)\n","\n","\n","# --- Bài toán 2: Biến đổi (x, y) -> (y, x - y) ---\n","\n","transformation_matrix = np.array([[0, 1],\n","                                  [1, -1]])\n","\n","print(\"\\n--- Bài toán 2: Ma trận biến đổi ---\")\n","print(transformation_matrix)\n","\n","points_original = np.array([[0, 1, 1, 0],\n","                            [0, 0, 1, 1]])\n","\n","print(\"\\n--- Bài toán 2: Các điểm gốc ---\")\n","print(points_original)\n","\n","points_transformed = transformation_matrix @ points_original\n","\n","print(\"\\n--- Bài toán 2: Các điểm sau biến đổi ---\")\n","print(points_transformed)\n","\n","x_orig, y_orig = points_original[0, :], points_original[1, :]\n","x_trans, y_trans = points_transformed[0, :], points_transformed[1, :]\n","\n","x_orig = np.append(x_orig, x_orig[0])\n","y_orig = np.append(y_orig, y_orig[0])\n","x_trans = np.append(x_trans, x_trans[0])\n","y_trans = np.append(y_trans, y_trans[0])\n","\n","plt.figure(figsize=(10, 5))\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(x_orig, y_orig, 'b-o')\n","plt.title('Original Square')\n","plt.xlabel('x')\n","plt.ylabel('y')\n","plt.grid(True)\n","plt.axhline(0, color='black', linewidth=0.5)\n","plt.axvline(0, color='black', linewidth=0.5)\n","plt.axis('equal')\n","plt.xlim(-0.5, 1.5)\n","plt.ylim(-0.5, 1.5)\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(x_trans, y_trans, 'g-o')\n","plt.title('Transformed Shape')\n","plt.xlabel('x')\n","plt.ylabel('y')\n","plt.grid(True)\n","plt.axhline(0, color='black', linewidth=0.5)\n","plt.axvline(0, color='black', linewidth=0.5)\n","plt.axis('equal')\n","min_val = min(np.min(x_trans), np.min(y_trans)) - 0.5\n","max_val = max(np.max(x_trans), np.max(y_trans)) + 0.5\n","plt.xlim(min_val, max_val)\n","plt.ylim(min_val, max_val)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"_tjOCrosuKHG","executionInfo":{"status":"ok","timestamp":1752140658170,"user_tz":-420,"elapsed":2180,"user":{"displayName":"","userId":""}},"outputId":"9cbd8a21-cb83-42fe-e83b-7e8e33ac5d3d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.axes._base:Ignoring fixed x limits to fulfill fixed data aspect with adjustable data limits.\n"]},{"output_type":"stream","name":"stdout","text":["--- Bài toán 1: Kết quả symbolic (Phương pháp 1) ---\n","Matrix([[a - x], [b + y]])\n","\n","--- Bài toán 1: Kết quả symbolic (Phương pháp 2) ---\n","Matrix([[a - x], [b + y], [1]])\n","\n","--- Bài toán 1: Kết quả số (Phương pháp 1) ---\n","[[-1]\n"," [ 2]]\n","\n","--- Bài toán 1: Kết quả số (Phương pháp 2) ---\n","[[-1]\n"," [ 2]\n"," [ 1]]\n","\n","--- Bài toán 2: Ma trận biến đổi ---\n","[[ 0  1]\n"," [ 1 -1]]\n","\n","--- Bài toán 2: Các điểm gốc ---\n","[[0 1 1 0]\n"," [0 0 1 1]]\n","\n","--- Bài toán 2: Các điểm sau biến đổi ---\n","[[ 0  0  1  1]\n"," [ 0  1  0 -1]]\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.axes._base:Ignoring fixed x limits to fulfill fixed data aspect with adjustable data limits.\n","WARNING:matplotlib.axes._base:Ignoring fixed y limits to fulfill fixed data aspect with adjustable data limits.\n","WARNING:matplotlib.axes._base:Ignoring fixed y limits to fulfill fixed data aspect with adjustable data limits.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import sympy as sp\n","\n","# Định nghĩa các biến symbolic\n","v1a, v2a = sp.symbols('v1a v2a') # Thành phần của vector u\n","v1b, v2b = sp.symbols('v1b v2b') # Thành phần của vector w\n","c = sp.symbols('c')             # Vô hướng\n","\n","# Định nghĩa ánh xạ T(v1, v2)\n","def T(v1_val, v2_val):\n","    return sp.Matrix([v1_val - v2_val, v1_val + 2*v2_val])\n","\n","print(\"--- Chứng minh tính chất cộng: T(u + w) == T(u) + T(w) ---\")\n","\n","# Định nghĩa vector u và w\n","u = sp.Matrix([v1a, v2a])\n","w = sp.Matrix([v1b, v2b])\n","\n","# Tính T(u + w)\n","T_u_plus_w = T(u[0] + w[0], u[1] + w[1])\n","print(f\"T(u + w) = {T_u_plus_w}\")\n","\n","# Tính T(u) + T(w)\n","T_u = T(u[0], u[1])\n","T_w = T(w[0], w[1])\n","T_u_plus_T_w = T_u + T_w\n","print(f\"T(u) + T(w) = {T_u_plus_T_w}\")\n","\n","# So sánh hai kết quả\n","are_equal_additivity = sp.simplify(T_u_plus_w - T_u_plus_T_w) == sp.Matrix([0, 0])\n","print(f\"T(u + w) == T(u) + T(w) ? {are_equal_additivity}\")\n","if are_equal_additivity:\n","    print(\"-> Tính chất cộng được thỏa mãn.\")\n","else:\n","    print(\"-> Tính chất cộng KHÔNG được thỏa mãn.\")\n","\n","\n","print(\"\\n--- Chứng minh tính chất nhân với vô hướng: T(c*u) == c*T(u) ---\")\n","\n","# Tính T(c*u)\n","T_c_u = T(c * u[0], c * u[1])\n","print(f\"T(c*u) = {T_c_u}\")\n","\n","# Tính c*T(u)\n","c_T_u = c * T_u\n","print(f\"c*T(u) = {c_T_u}\")\n","\n","# So sánh hai kết quả\n","are_equal_homogeneity = sp.simplify(T_c_u - c_T_u) == sp.Matrix([0, 0])\n","print(f\"T(c*u) == c*T(u) ? {are_equal_homogeneity}\")\n","if are_equal_homogeneity:\n","    print(\"-> Tính chất nhân với vô hướng được thỏa mãn.\")\n","else:\n","    print(\"-> Tính chất nhân với vô hướng KHÔNG được thỏa mãn.\")\n","\n","\n","print(\"\\n--- Kết luận chung ---\")\n","if are_equal_additivity and are_equal_homogeneity:\n","    print(\"Cả hai tính chất đều được thỏa mãn. Do đó, ánh xạ T LÀ ánh xạ tuyến tính.\")\n","else:\n","    print(\"Một hoặc cả hai tính chất KHÔNG được thỏa mãn. Do đó, ánh xạ T KHÔNG phải là ánh xạ tuyến tính.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rLEqhYUQuT7F","executionInfo":{"status":"ok","timestamp":1752140746580,"user_tz":-420,"elapsed":57,"user":{"displayName":"","userId":""}},"outputId":"f7860cb9-90ab-4408-977c-032b013470e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Chứng minh tính chất cộng: T(u + w) == T(u) + T(w) ---\n","T(u + w) = Matrix([[v1a + v1b - v2a - v2b], [v1a + v1b + 2*v2a + 2*v2b]])\n","T(u) + T(w) = Matrix([[v1a + v1b - v2a - v2b], [v1a + v1b + 2*v2a + 2*v2b]])\n","T(u + w) == T(u) + T(w) ? True\n","-> Tính chất cộng được thỏa mãn.\n","\n","--- Chứng minh tính chất nhân với vô hướng: T(c*u) == c*T(u) ---\n","T(c*u) = Matrix([[c*v1a - c*v2a], [c*v1a + 2*c*v2a]])\n","c*T(u) = Matrix([[c*(v1a - v2a)], [c*(v1a + 2*v2a)]])\n","T(c*u) == c*T(u) ? True\n","-> Tính chất nhân với vô hướng được thỏa mãn.\n","\n","--- Kết luận chung ---\n","Cả hai tính chất đều được thỏa mãn. Do đó, ánh xạ T LÀ ánh xạ tuyến tính.\n"]}]},{"cell_type":"code","source":["import sympy as sp\n","import numpy as np\n","\n","# Định nghĩa các biến symbolic\n","x, y = sp.symbols('x y')\n","x_prime, y_prime = sp.symbols(\"x' y'\")\n","\n","# 1. Phương trình ellipse gốc\n","conic_equation_original = 13*x**2 - 10*x*y + 13*y**2 - 72 # Từ đề bài\n","\n","print(\"--- Phương trình Ellipse gốc ---\")\n","print(conic_equation_original)\n","\n","# Các hệ số: a = 13, b = -10, c = 13, f = -72\n","\n","# 2. Tính toán góc quay theta\n","# cot(2*theta) = (a - c) / b\n","# cot(2*theta) = (13 - 13) / (-10) = 0 / (-10) = 0\n","# Khi cot(2*theta) = 0, thì 2*theta = pi/2 (hoặc pi/2 + k*pi)\n","# Chọn 2*theta = pi/2 => theta = pi/4\n","rotation_angle = sp.pi / 4 # Tương đương 45 độ\n","\n","print(f\"\\n--- Góc quay (theta) ---\")\n","print(f\"Theta = {rotation_angle} radians ({np.degrees(np.pi/4)} degrees)\") # Changed to np.degrees(np.pi/4)\n","\n","# 3. Định nghĩa các phép thế x, y theo x', y'\n","# x = x'cos(theta) - y'sin(theta)\n","# y = x'sin(theta) + y'cos(theta)\n","cos_theta = sp.cos(rotation_angle)\n","sin_theta = sp.sin(rotation_angle)\n","\n","x_sub = x_prime * cos_theta - y_prime * sin_theta\n","y_sub = x_prime * sin_theta + y_prime * cos_theta\n","\n","print(\"\\n--- Các biểu thức thế (x, y theo x', y') ---\")\n","print(f\"x = {x_sub}\")\n","print(f\"y = {y_sub}\")\n","\n","# 4. Thực hiện phép thế vào phương trình gốc và đơn giản hóa\n","conic_equation_transformed = conic_equation_original.subs({x: x_sub, y: y_sub})\n","conic_equation_simplified = sp.expand(conic_equation_transformed)\n","\n","print(\"\\n--- Phương trình sau khi biến đổi và đơn giản hóa ---\")\n","print(conic_equation_simplified)\n","\n","# 5. Đưa về dạng chính tắc\n","# Phương trình đã đơn giản hóa có dạng: 8*(x')**2 + 18*(y')**2 - 72 = 0\n","# Theo gợi ý, giá trị riêng là lambda1 = 8 và lambda2 = 18\n","# Dạng chính tắc là lambda1*(x')**2 + lambda2*(y')**2 - f_new = 0.\n","# Ở đây, f_new = 72\n","# => 8*(x')**2 + 18*(y')**2 = 72\n","# Chia cả hai vế cho 72 để có dạng chính tắc = 1\n","canonical_form_lhs = conic_equation_simplified + 72 # Đưa hằng số sang vế phải\n","canonical_form_divided = canonical_form_lhs / 72\n","\n","print(\"\\n--- Dạng chính tắc của phương trình Ellipse ---\")\n","# Kết quả khớp với gợi ý: (x')^2/9 + (y')^2/4 = 1\n","print(f\"{canonical_form_divided} = 1\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C4s2KrJlwzWG","executionInfo":{"status":"ok","timestamp":1752141423875,"user_tz":-420,"elapsed":8,"user":{"displayName":"","userId":""}},"outputId":"1a535f1c-f08a-41e5-aa65-62f9722dab17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Phương trình Ellipse gốc ---\n","13*x**2 - 10*x*y + 13*y**2 - 72\n","\n","--- Góc quay (theta) ---\n","Theta = pi/4 radians (45.0 degrees)\n","\n","--- Các biểu thức thế (x, y theo x', y') ---\n","x = sqrt(2)*x'/2 - sqrt(2)*y'/2\n","y = sqrt(2)*x'/2 + sqrt(2)*y'/2\n","\n","--- Phương trình sau khi biến đổi và đơn giản hóa ---\n","8*x'**2 + 18*y'**2 - 72\n","\n","--- Dạng chính tắc của phương trình Ellipse ---\n","x'**2/9 + y'**2/4 = 1\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1752141448456}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}